import {
  __commonJS,
  require_react
} from "./chunk-X3X6SVBD.js";

// node_modules/performance-now/lib/performance-now.js
var require_performance_now = __commonJS({
  "node_modules/performance-now/lib/performance-now.js"(exports, module) {
    (function() {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function() {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function() {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };
        hrtime = process.hrtime;
        getNanoSeconds = function() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };
        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function() {
          return Date.now() - loadTime;
        };
        loadTime = Date.now();
      } else {
        module.exports = function() {
          return (/* @__PURE__ */ new Date()).getTime() - loadTime;
        };
        loadTime = (/* @__PURE__ */ new Date()).getTime();
      }
    }).call(exports);
  }
});

// node_modules/raf/index.js
var require_raf = __commonJS({
  "node_modules/raf/index.js"(exports, module) {
    var now = require_performance_now();
    var root = typeof window === "undefined" ? global : window;
    var vendors = ["moz", "webkit"];
    var suffix = "AnimationFrame";
    var raf = root["request" + suffix];
    var caf = root["cancel" + suffix] || root["cancelRequest" + suffix];
    for (i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + "Request" + suffix];
      caf = root[vendors[i] + "Cancel" + suffix] || root[vendors[i] + "CancelRequest" + suffix];
    }
    var i;
    if (!raf || !caf) {
      last = 0, id = 0, queue = [], frameDuration = 1e3 / 60;
      raf = function(callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function() {
            var cp = queue.slice(0);
            queue.length = 0;
            for (var i2 = 0; i2 < cp.length; i2++) {
              if (!cp[i2].cancelled) {
                try {
                  cp[i2].callback(last);
                } catch (e) {
                  setTimeout(function() {
                    throw e;
                  }, 0);
                }
              }
            }
          }, Math.round(next));
        }
        queue.push({
          handle: ++id,
          callback,
          cancelled: false
        });
        return id;
      };
      caf = function(handle) {
        for (var i2 = 0; i2 < queue.length; i2++) {
          if (queue[i2].handle === handle) {
            queue[i2].cancelled = true;
          }
        }
      };
    }
    var last;
    var id;
    var queue;
    var frameDuration;
    module.exports = function(fn) {
      return raf.call(root, fn);
    };
    module.exports.cancel = function() {
      caf.apply(root, arguments);
    };
    module.exports.polyfill = function(object) {
      if (!object) {
        object = root;
      }
      object.requestAnimationFrame = raf;
      object.cancelAnimationFrame = caf;
    };
  }
});

// node_modules/prefix-style/index.js
var require_prefix_style = __commonJS({
  "node_modules/prefix-style/index.js"(exports, module) {
    var div = null;
    var prefixes = ["Webkit", "Moz", "O", "ms"];
    module.exports = function prefixStyle(prop) {
      if (!div) {
        div = document.createElement("div");
      }
      var style = div.style;
      if (prop in style) {
        return prop;
      }
      var titleCase = prop.charAt(0).toUpperCase() + prop.slice(1);
      for (var i = prefixes.length; i >= 0; i--) {
        var name = prefixes[i] + titleCase;
        if (name in style) {
          return name;
        }
      }
      return false;
    };
  }
});

// node_modules/to-no-case/index.js
var require_to_no_case = __commonJS({
  "node_modules/to-no-case/index.js"(exports, module) {
    module.exports = toNoCase;
    var hasSpace = /\s/;
    var hasSeparator = /(_|-|\.|:)/;
    var hasCamel = /([a-z][A-Z]|[A-Z][a-z])/;
    function toNoCase(string) {
      if (hasSpace.test(string))
        return string.toLowerCase();
      if (hasSeparator.test(string))
        return (unseparate(string) || string).toLowerCase();
      if (hasCamel.test(string))
        return uncamelize(string).toLowerCase();
      return string.toLowerCase();
    }
    var separatorSplitter = /[\W_]+(.|$)/g;
    function unseparate(string) {
      return string.replace(separatorSplitter, function(m, next) {
        return next ? " " + next : "";
      });
    }
    var camelSplitter = /(.)([A-Z]+)/g;
    function uncamelize(string) {
      return string.replace(camelSplitter, function(m, previous, uppers) {
        return previous + " " + uppers.toLowerCase().split("").join(" ");
      });
    }
  }
});

// node_modules/to-space-case/index.js
var require_to_space_case = __commonJS({
  "node_modules/to-space-case/index.js"(exports, module) {
    var clean = require_to_no_case();
    module.exports = toSpaceCase;
    function toSpaceCase(string) {
      return clean(string).replace(/[\W_]+(.|$)/g, function(matches, match) {
        return match ? " " + match : "";
      }).trim();
    }
  }
});

// node_modules/to-camel-case/index.js
var require_to_camel_case = __commonJS({
  "node_modules/to-camel-case/index.js"(exports, module) {
    var space = require_to_space_case();
    module.exports = toCamelCase;
    function toCamelCase(string) {
      return space(string).replace(/\s(\w)/g, function(matches, letter) {
        return letter.toUpperCase();
      });
    }
  }
});

// node_modules/add-px-to-style/index.js
var require_add_px_to_style = __commonJS({
  "node_modules/add-px-to-style/index.js"(exports, module) {
    var IS_UNITLESS = {
      animationIterationCount: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridRow: true,
      gridColumn: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      stopOpacity: true,
      strokeDashoffset: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    module.exports = function(name, value) {
      if (typeof value === "number" && !IS_UNITLESS[name]) {
        return value + "px";
      } else {
        return value;
      }
    };
  }
});

// node_modules/dom-css/index.js
var require_dom_css = __commonJS({
  "node_modules/dom-css/index.js"(exports, module) {
    var prefix = require_prefix_style();
    var toCamelCase = require_to_camel_case();
    var cache = { "float": "cssFloat" };
    var addPxToStyle = require_add_px_to_style();
    function style(element, property, value) {
      var camel = cache[property];
      if (typeof camel === "undefined") {
        camel = detect(property);
      }
      if (camel) {
        if (value === void 0) {
          return element.style[camel];
        }
        element.style[camel] = addPxToStyle(camel, value);
      }
    }
    function each(element, properties) {
      for (var k in properties) {
        if (properties.hasOwnProperty(k)) {
          style(element, k, properties[k]);
        }
      }
    }
    function detect(cssProp) {
      var camel = toCamelCase(cssProp);
      var result = prefix(camel);
      cache[camel] = cache[cssProp] = cache[result] = result;
      return result;
    }
    function set() {
      if (arguments.length === 2) {
        if (typeof arguments[1] === "string") {
          arguments[0].style.cssText = arguments[1];
        } else {
          each(arguments[0], arguments[1]);
        }
      } else {
        style(arguments[0], arguments[1], arguments[2]);
      }
    }
    module.exports = set;
    module.exports.set = set;
    module.exports.get = function(element, properties) {
      if (Array.isArray(properties)) {
        return properties.reduce(function(obj, prop) {
          obj[prop] = style(element, prop || "");
          return obj;
        }, {});
      } else {
        return style(element, properties || "");
      }
    };
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-custom-scrollbars-2/lib/utils/isString.js
var require_isString = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/utils/isString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isString;
    function isString(maybe) {
      return typeof maybe === "string";
    }
  }
});

// node_modules/react-custom-scrollbars-2/lib/utils/getScrollbarWidth.js
var require_getScrollbarWidth = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/utils/getScrollbarWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getScrollbarWidth;
    var _domCss = require_dom_css();
    var _domCss2 = _interopRequireDefault(_domCss);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var scrollbarWidth = false;
    function getScrollbarWidth() {
      var cacheEnabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      if (cacheEnabled && scrollbarWidth !== false)
        return scrollbarWidth;
      if (typeof document !== "undefined") {
        var div = document.createElement("div");
        (0, _domCss2["default"])(div, {
          width: 100,
          height: 100,
          position: "absolute",
          top: -9999,
          overflow: "scroll",
          MsOverflowStyle: "scrollbar"
        });
        document.body.appendChild(div);
        scrollbarWidth = div.offsetWidth - div.clientWidth;
        document.body.removeChild(div);
      } else {
        scrollbarWidth = 0;
      }
      return scrollbarWidth || 0;
    }
  }
});

// node_modules/react-custom-scrollbars-2/lib/utils/returnFalse.js
var require_returnFalse = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/utils/returnFalse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = returnFalse;
    function returnFalse() {
      return false;
    }
  }
});

// node_modules/react-custom-scrollbars-2/lib/utils/getInnerWidth.js
var require_getInnerWidth = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/utils/getInnerWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getInnerWidth;
    function getInnerWidth(el) {
      var clientWidth = el.clientWidth;
      var _getComputedStyle = getComputedStyle(el), paddingLeft = _getComputedStyle.paddingLeft, paddingRight = _getComputedStyle.paddingRight;
      return clientWidth - parseFloat(paddingLeft) - parseFloat(paddingRight);
    }
  }
});

// node_modules/react-custom-scrollbars-2/lib/utils/getInnerHeight.js
var require_getInnerHeight = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/utils/getInnerHeight.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = getInnerHeight;
    function getInnerHeight(el) {
      var clientHeight = el.clientHeight;
      var _getComputedStyle = getComputedStyle(el), paddingTop = _getComputedStyle.paddingTop, paddingBottom = _getComputedStyle.paddingBottom;
      return clientHeight - parseFloat(paddingTop) - parseFloat(paddingBottom);
    }
  }
});

// node_modules/react-custom-scrollbars-2/lib/Scrollbars/styles.js
var require_styles = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/Scrollbars/styles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var containerStyleDefault = exports.containerStyleDefault = {
      position: "relative",
      overflow: "hidden",
      width: "100%",
      height: "100%"
    };
    var containerStyleAutoHeight = exports.containerStyleAutoHeight = {
      height: "auto"
    };
    var viewStyleDefault = exports.viewStyleDefault = {
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      overflow: "scroll",
      WebkitOverflowScrolling: "touch"
    };
    var viewStyleAutoHeight = exports.viewStyleAutoHeight = {
      position: "relative",
      top: void 0,
      left: void 0,
      right: void 0,
      bottom: void 0
    };
    var viewStyleUniversalInitial = exports.viewStyleUniversalInitial = {
      overflow: "hidden",
      marginRight: 0,
      marginBottom: 0
    };
    var trackHorizontalStyleDefault = exports.trackHorizontalStyleDefault = {
      position: "absolute",
      height: 6
    };
    var trackVerticalStyleDefault = exports.trackVerticalStyleDefault = {
      position: "absolute",
      width: 6
    };
    var thumbHorizontalStyleDefault = exports.thumbHorizontalStyleDefault = {
      position: "relative",
      display: "block",
      height: "100%"
    };
    var thumbVerticalStyleDefault = exports.thumbVerticalStyleDefault = {
      position: "relative",
      display: "block",
      width: "100%"
    };
    var disableSelectStyle = exports.disableSelectStyle = {
      userSelect: "none"
    };
    var disableSelectStyleReset = exports.disableSelectStyleReset = {
      userSelect: ""
    };
  }
});

// node_modules/react-custom-scrollbars-2/lib/Scrollbars/defaultRenderElements.js
var require_defaultRenderElements = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/Scrollbars/defaultRenderElements.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    exports.renderViewDefault = renderViewDefault;
    exports.renderTrackHorizontalDefault = renderTrackHorizontalDefault;
    exports.renderTrackVerticalDefault = renderTrackVerticalDefault;
    exports.renderThumbHorizontalDefault = renderThumbHorizontalDefault;
    exports.renderThumbVerticalDefault = renderThumbVerticalDefault;
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    function renderViewDefault(props) {
      return _react2["default"].createElement("div", props);
    }
    function renderTrackHorizontalDefault(_ref) {
      var style = _ref.style, props = _objectWithoutProperties(_ref, ["style"]);
      var finalStyle = _extends({}, style, {
        right: 2,
        bottom: 2,
        left: 2,
        borderRadius: 3
      });
      return _react2["default"].createElement("div", _extends({ style: finalStyle }, props));
    }
    function renderTrackVerticalDefault(_ref2) {
      var style = _ref2.style, props = _objectWithoutProperties(_ref2, ["style"]);
      var finalStyle = _extends({}, style, {
        right: 2,
        bottom: 2,
        top: 2,
        borderRadius: 3
      });
      return _react2["default"].createElement("div", _extends({ style: finalStyle }, props));
    }
    function renderThumbHorizontalDefault(_ref3) {
      var style = _ref3.style, props = _objectWithoutProperties(_ref3, ["style"]);
      var finalStyle = _extends({}, style, {
        cursor: "pointer",
        borderRadius: "inherit",
        backgroundColor: "rgba(0,0,0,.2)"
      });
      return _react2["default"].createElement("div", _extends({ style: finalStyle }, props));
    }
    function renderThumbVerticalDefault(_ref4) {
      var style = _ref4.style, props = _objectWithoutProperties(_ref4, ["style"]);
      var finalStyle = _extends({}, style, {
        cursor: "pointer",
        borderRadius: "inherit",
        backgroundColor: "rgba(0,0,0,.2)"
      });
      return _react2["default"].createElement("div", _extends({ style: finalStyle }, props));
    }
  }
});

// node_modules/react-custom-scrollbars-2/lib/Scrollbars/index.js
var require_Scrollbars = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/Scrollbars/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _raf2 = require_raf();
    var _raf3 = _interopRequireDefault(_raf2);
    var _domCss = require_dom_css();
    var _domCss2 = _interopRequireDefault(_domCss);
    var _react = require_react();
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _isString = require_isString();
    var _isString2 = _interopRequireDefault(_isString);
    var _getScrollbarWidth = require_getScrollbarWidth();
    var _getScrollbarWidth2 = _interopRequireDefault(_getScrollbarWidth);
    var _returnFalse = require_returnFalse();
    var _returnFalse2 = _interopRequireDefault(_returnFalse);
    var _getInnerWidth = require_getInnerWidth();
    var _getInnerWidth2 = _interopRequireDefault(_getInnerWidth);
    var _getInnerHeight = require_getInnerHeight();
    var _getInnerHeight2 = _interopRequireDefault(_getInnerHeight);
    var _styles = require_styles();
    var _defaultRenderElements = require_defaultRenderElements();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _objectWithoutProperties(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0)
          continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i))
          continue;
        target[i] = obj[i];
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Scrollbars = function(_Component) {
      _inherits(Scrollbars2, _Component);
      function Scrollbars2(props) {
        var _ref;
        _classCallCheck(this, Scrollbars2);
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        var _this = _possibleConstructorReturn(this, (_ref = Scrollbars2.__proto__ || Object.getPrototypeOf(Scrollbars2)).call.apply(_ref, [this, props].concat(rest)));
        _this.getScrollLeft = _this.getScrollLeft.bind(_this);
        _this.getScrollTop = _this.getScrollTop.bind(_this);
        _this.getScrollWidth = _this.getScrollWidth.bind(_this);
        _this.getScrollHeight = _this.getScrollHeight.bind(_this);
        _this.getClientWidth = _this.getClientWidth.bind(_this);
        _this.getClientHeight = _this.getClientHeight.bind(_this);
        _this.getValues = _this.getValues.bind(_this);
        _this.getThumbHorizontalWidth = _this.getThumbHorizontalWidth.bind(_this);
        _this.getThumbVerticalHeight = _this.getThumbVerticalHeight.bind(_this);
        _this.getScrollLeftForOffset = _this.getScrollLeftForOffset.bind(_this);
        _this.getScrollTopForOffset = _this.getScrollTopForOffset.bind(_this);
        _this.scrollLeft = _this.scrollLeft.bind(_this);
        _this.scrollTop = _this.scrollTop.bind(_this);
        _this.scrollToLeft = _this.scrollToLeft.bind(_this);
        _this.scrollToTop = _this.scrollToTop.bind(_this);
        _this.scrollToRight = _this.scrollToRight.bind(_this);
        _this.scrollToBottom = _this.scrollToBottom.bind(_this);
        _this.handleTrackMouseEnter = _this.handleTrackMouseEnter.bind(_this);
        _this.handleTrackMouseLeave = _this.handleTrackMouseLeave.bind(_this);
        _this.handleHorizontalTrackMouseDown = _this.handleHorizontalTrackMouseDown.bind(_this);
        _this.handleVerticalTrackMouseDown = _this.handleVerticalTrackMouseDown.bind(_this);
        _this.handleHorizontalThumbMouseDown = _this.handleHorizontalThumbMouseDown.bind(_this);
        _this.handleVerticalThumbMouseDown = _this.handleVerticalThumbMouseDown.bind(_this);
        _this.handleWindowResize = _this.handleWindowResize.bind(_this);
        _this.handleScroll = _this.handleScroll.bind(_this);
        _this.handleDrag = _this.handleDrag.bind(_this);
        _this.handleDragEnd = _this.handleDragEnd.bind(_this);
        _this.state = {
          didMountUniversal: false
        };
        return _this;
      }
      _createClass(Scrollbars2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.addListeners();
          this.update();
          this.componentDidMountUniversal();
        }
      }, {
        key: "componentDidMountUniversal",
        value: function componentDidMountUniversal() {
          var universal = this.props.universal;
          if (!universal)
            return;
          this.setState({ didMountUniversal: true });
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          this.update();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.removeListeners();
          (0, _raf2.cancel)(this.requestFrame);
          clearTimeout(this.hideTracksTimeout);
          clearInterval(this.detectScrollingInterval);
        }
      }, {
        key: "getScrollLeft",
        value: function getScrollLeft() {
          if (!this.view)
            return 0;
          return this.view.scrollLeft;
        }
      }, {
        key: "getScrollTop",
        value: function getScrollTop() {
          if (!this.view)
            return 0;
          return this.view.scrollTop;
        }
      }, {
        key: "getScrollWidth",
        value: function getScrollWidth() {
          if (!this.view)
            return 0;
          return this.view.scrollWidth;
        }
      }, {
        key: "getScrollHeight",
        value: function getScrollHeight() {
          if (!this.view)
            return 0;
          return this.view.scrollHeight;
        }
      }, {
        key: "getClientWidth",
        value: function getClientWidth() {
          if (!this.view)
            return 0;
          return this.view.clientWidth;
        }
      }, {
        key: "getClientHeight",
        value: function getClientHeight() {
          if (!this.view)
            return 0;
          return this.view.clientHeight;
        }
      }, {
        key: "getValues",
        value: function getValues() {
          var _ref2 = this.view || {}, _ref2$scrollLeft = _ref2.scrollLeft, scrollLeft = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft, _ref2$scrollTop = _ref2.scrollTop, scrollTop = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop, _ref2$scrollWidth = _ref2.scrollWidth, scrollWidth = _ref2$scrollWidth === void 0 ? 0 : _ref2$scrollWidth, _ref2$scrollHeight = _ref2.scrollHeight, scrollHeight = _ref2$scrollHeight === void 0 ? 0 : _ref2$scrollHeight, _ref2$clientWidth = _ref2.clientWidth, clientWidth = _ref2$clientWidth === void 0 ? 0 : _ref2$clientWidth, _ref2$clientHeight = _ref2.clientHeight, clientHeight = _ref2$clientHeight === void 0 ? 0 : _ref2$clientHeight;
          return {
            left: scrollLeft / (scrollWidth - clientWidth) || 0,
            top: scrollTop / (scrollHeight - clientHeight) || 0,
            scrollLeft,
            scrollTop,
            scrollWidth,
            scrollHeight,
            clientWidth,
            clientHeight
          };
        }
      }, {
        key: "getThumbHorizontalWidth",
        value: function getThumbHorizontalWidth() {
          var _props = this.props, thumbSize = _props.thumbSize, thumbMinSize = _props.thumbMinSize;
          var _view = this.view, scrollWidth = _view.scrollWidth, clientWidth = _view.clientWidth;
          var trackWidth = (0, _getInnerWidth2["default"])(this.trackHorizontal);
          var width = Math.ceil(clientWidth / scrollWidth * trackWidth);
          if (trackWidth <= width)
            return 0;
          if (thumbSize)
            return thumbSize;
          return Math.max(width, thumbMinSize);
        }
      }, {
        key: "getThumbVerticalHeight",
        value: function getThumbVerticalHeight() {
          var _props2 = this.props, thumbSize = _props2.thumbSize, thumbMinSize = _props2.thumbMinSize;
          var _view2 = this.view, scrollHeight = _view2.scrollHeight, clientHeight = _view2.clientHeight;
          var trackHeight = (0, _getInnerHeight2["default"])(this.trackVertical);
          var height = Math.ceil(clientHeight / scrollHeight * trackHeight);
          if (trackHeight <= height)
            return 0;
          if (thumbSize)
            return thumbSize;
          return Math.max(height, thumbMinSize);
        }
      }, {
        key: "getScrollLeftForOffset",
        value: function getScrollLeftForOffset(offset) {
          var _view3 = this.view, scrollWidth = _view3.scrollWidth, clientWidth = _view3.clientWidth;
          var trackWidth = (0, _getInnerWidth2["default"])(this.trackHorizontal);
          var thumbWidth = this.getThumbHorizontalWidth();
          return offset / (trackWidth - thumbWidth) * (scrollWidth - clientWidth);
        }
      }, {
        key: "getScrollTopForOffset",
        value: function getScrollTopForOffset(offset) {
          var _view4 = this.view, scrollHeight = _view4.scrollHeight, clientHeight = _view4.clientHeight;
          var trackHeight = (0, _getInnerHeight2["default"])(this.trackVertical);
          var thumbHeight = this.getThumbVerticalHeight();
          return offset / (trackHeight - thumbHeight) * (scrollHeight - clientHeight);
        }
      }, {
        key: "scrollLeft",
        value: function scrollLeft() {
          var left = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
          if (!this.view)
            return;
          this.view.scrollLeft = left;
        }
      }, {
        key: "scrollTop",
        value: function scrollTop() {
          var top = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
          if (!this.view)
            return;
          this.view.scrollTop = top;
        }
      }, {
        key: "scrollToLeft",
        value: function scrollToLeft() {
          if (!this.view)
            return;
          this.view.scrollLeft = 0;
        }
      }, {
        key: "scrollToTop",
        value: function scrollToTop() {
          if (!this.view)
            return;
          this.view.scrollTop = 0;
        }
      }, {
        key: "scrollToRight",
        value: function scrollToRight() {
          if (!this.view)
            return;
          this.view.scrollLeft = this.view.scrollWidth;
        }
      }, {
        key: "scrollToBottom",
        value: function scrollToBottom() {
          if (!this.view)
            return;
          this.view.scrollTop = this.view.scrollHeight;
        }
      }, {
        key: "addListeners",
        value: function addListeners() {
          if (typeof document === "undefined" || !this.view)
            return;
          var view = this.view, trackHorizontal = this.trackHorizontal, trackVertical = this.trackVertical, thumbHorizontal = this.thumbHorizontal, thumbVertical = this.thumbVertical;
          view.addEventListener("scroll", this.handleScroll);
          if (!(0, _getScrollbarWidth2["default"])())
            return;
          trackHorizontal.addEventListener("mouseenter", this.handleTrackMouseEnter);
          trackHorizontal.addEventListener("mouseleave", this.handleTrackMouseLeave);
          trackHorizontal.addEventListener("mousedown", this.handleHorizontalTrackMouseDown);
          trackVertical.addEventListener("mouseenter", this.handleTrackMouseEnter);
          trackVertical.addEventListener("mouseleave", this.handleTrackMouseLeave);
          trackVertical.addEventListener("mousedown", this.handleVerticalTrackMouseDown);
          thumbHorizontal.addEventListener("mousedown", this.handleHorizontalThumbMouseDown);
          thumbVertical.addEventListener("mousedown", this.handleVerticalThumbMouseDown);
          window.addEventListener("resize", this.handleWindowResize);
        }
      }, {
        key: "removeListeners",
        value: function removeListeners() {
          if (typeof document === "undefined" || !this.view)
            return;
          var view = this.view, trackHorizontal = this.trackHorizontal, trackVertical = this.trackVertical, thumbHorizontal = this.thumbHorizontal, thumbVertical = this.thumbVertical;
          view.removeEventListener("scroll", this.handleScroll);
          if (!(0, _getScrollbarWidth2["default"])())
            return;
          trackHorizontal.removeEventListener("mouseenter", this.handleTrackMouseEnter);
          trackHorizontal.removeEventListener("mouseleave", this.handleTrackMouseLeave);
          trackHorizontal.removeEventListener("mousedown", this.handleHorizontalTrackMouseDown);
          trackVertical.removeEventListener("mouseenter", this.handleTrackMouseEnter);
          trackVertical.removeEventListener("mouseleave", this.handleTrackMouseLeave);
          trackVertical.removeEventListener("mousedown", this.handleVerticalTrackMouseDown);
          thumbHorizontal.removeEventListener("mousedown", this.handleHorizontalThumbMouseDown);
          thumbVertical.removeEventListener("mousedown", this.handleVerticalThumbMouseDown);
          window.removeEventListener("resize", this.handleWindowResize);
          this.teardownDragging();
        }
      }, {
        key: "handleScroll",
        value: function handleScroll(event) {
          var _this2 = this;
          var _props3 = this.props, onScroll = _props3.onScroll, onScrollFrame = _props3.onScrollFrame;
          if (onScroll)
            onScroll(event);
          this.update(function(values) {
            var scrollLeft = values.scrollLeft, scrollTop = values.scrollTop;
            _this2.viewScrollLeft = scrollLeft;
            _this2.viewScrollTop = scrollTop;
            if (onScrollFrame)
              onScrollFrame(values);
          });
          this.detectScrolling();
        }
      }, {
        key: "handleScrollStart",
        value: function handleScrollStart() {
          var onScrollStart = this.props.onScrollStart;
          if (onScrollStart)
            onScrollStart();
          this.handleScrollStartAutoHide();
        }
      }, {
        key: "handleScrollStartAutoHide",
        value: function handleScrollStartAutoHide() {
          var autoHide = this.props.autoHide;
          if (!autoHide)
            return;
          this.showTracks();
        }
      }, {
        key: "handleScrollStop",
        value: function handleScrollStop() {
          var onScrollStop = this.props.onScrollStop;
          if (onScrollStop)
            onScrollStop();
          this.handleScrollStopAutoHide();
        }
      }, {
        key: "handleScrollStopAutoHide",
        value: function handleScrollStopAutoHide() {
          var autoHide = this.props.autoHide;
          if (!autoHide)
            return;
          this.hideTracks();
        }
      }, {
        key: "handleWindowResize",
        value: function handleWindowResize() {
          (0, _getScrollbarWidth2["default"])(false);
          this.forceUpdate();
        }
      }, {
        key: "handleHorizontalTrackMouseDown",
        value: function handleHorizontalTrackMouseDown(event) {
          event.preventDefault();
          var target = event.target, clientX = event.clientX;
          var _target$getBoundingCl = target.getBoundingClientRect(), targetLeft = _target$getBoundingCl.left;
          var thumbWidth = this.getThumbHorizontalWidth();
          var offset = Math.abs(targetLeft - clientX) - thumbWidth / 2;
          this.view.scrollLeft = this.getScrollLeftForOffset(offset);
        }
      }, {
        key: "handleVerticalTrackMouseDown",
        value: function handleVerticalTrackMouseDown(event) {
          event.preventDefault();
          var target = event.target, clientY = event.clientY;
          var _target$getBoundingCl2 = target.getBoundingClientRect(), targetTop = _target$getBoundingCl2.top;
          var thumbHeight = this.getThumbVerticalHeight();
          var offset = Math.abs(targetTop - clientY) - thumbHeight / 2;
          this.view.scrollTop = this.getScrollTopForOffset(offset);
        }
      }, {
        key: "handleHorizontalThumbMouseDown",
        value: function handleHorizontalThumbMouseDown(event) {
          event.preventDefault();
          this.handleDragStart(event);
          var target = event.target, clientX = event.clientX;
          var offsetWidth = target.offsetWidth;
          var _target$getBoundingCl3 = target.getBoundingClientRect(), left = _target$getBoundingCl3.left;
          this.prevPageX = offsetWidth - (clientX - left);
        }
      }, {
        key: "handleVerticalThumbMouseDown",
        value: function handleVerticalThumbMouseDown(event) {
          event.preventDefault();
          this.handleDragStart(event);
          var target = event.target, clientY = event.clientY;
          var offsetHeight = target.offsetHeight;
          var _target$getBoundingCl4 = target.getBoundingClientRect(), top = _target$getBoundingCl4.top;
          this.prevPageY = offsetHeight - (clientY - top);
        }
      }, {
        key: "setupDragging",
        value: function setupDragging() {
          (0, _domCss2["default"])(document.body, _styles.disableSelectStyle);
          document.addEventListener("mousemove", this.handleDrag);
          document.addEventListener("mouseup", this.handleDragEnd);
          document.onselectstart = _returnFalse2["default"];
        }
      }, {
        key: "teardownDragging",
        value: function teardownDragging() {
          (0, _domCss2["default"])(document.body, _styles.disableSelectStyleReset);
          document.removeEventListener("mousemove", this.handleDrag);
          document.removeEventListener("mouseup", this.handleDragEnd);
          document.onselectstart = void 0;
        }
      }, {
        key: "handleDragStart",
        value: function handleDragStart(event) {
          this.dragging = true;
          event.stopImmediatePropagation();
          this.setupDragging();
        }
      }, {
        key: "handleDrag",
        value: function handleDrag(event) {
          if (this.prevPageX) {
            var clientX = event.clientX;
            var _trackHorizontal$getB = this.trackHorizontal.getBoundingClientRect(), trackLeft = _trackHorizontal$getB.left;
            var thumbWidth = this.getThumbHorizontalWidth();
            var clickPosition = thumbWidth - this.prevPageX;
            var offset = -trackLeft + clientX - clickPosition;
            this.view.scrollLeft = this.getScrollLeftForOffset(offset);
          }
          if (this.prevPageY) {
            var clientY = event.clientY;
            var _trackVertical$getBou = this.trackVertical.getBoundingClientRect(), trackTop = _trackVertical$getBou.top;
            var thumbHeight = this.getThumbVerticalHeight();
            var _clickPosition = thumbHeight - this.prevPageY;
            var _offset = -trackTop + clientY - _clickPosition;
            this.view.scrollTop = this.getScrollTopForOffset(_offset);
          }
          return false;
        }
      }, {
        key: "handleDragEnd",
        value: function handleDragEnd() {
          this.dragging = false;
          this.prevPageX = this.prevPageY = 0;
          this.teardownDragging();
          this.handleDragEndAutoHide();
        }
      }, {
        key: "handleDragEndAutoHide",
        value: function handleDragEndAutoHide() {
          var autoHide = this.props.autoHide;
          if (!autoHide)
            return;
          this.hideTracks();
        }
      }, {
        key: "handleTrackMouseEnter",
        value: function handleTrackMouseEnter() {
          this.trackMouseOver = true;
          this.handleTrackMouseEnterAutoHide();
        }
      }, {
        key: "handleTrackMouseEnterAutoHide",
        value: function handleTrackMouseEnterAutoHide() {
          var autoHide = this.props.autoHide;
          if (!autoHide)
            return;
          this.showTracks();
        }
      }, {
        key: "handleTrackMouseLeave",
        value: function handleTrackMouseLeave() {
          this.trackMouseOver = false;
          this.handleTrackMouseLeaveAutoHide();
        }
      }, {
        key: "handleTrackMouseLeaveAutoHide",
        value: function handleTrackMouseLeaveAutoHide() {
          var autoHide = this.props.autoHide;
          if (!autoHide)
            return;
          this.hideTracks();
        }
      }, {
        key: "showTracks",
        value: function showTracks() {
          clearTimeout(this.hideTracksTimeout);
          (0, _domCss2["default"])(this.trackHorizontal, { opacity: 1 });
          (0, _domCss2["default"])(this.trackVertical, { opacity: 1 });
        }
      }, {
        key: "hideTracks",
        value: function hideTracks() {
          var _this3 = this;
          if (this.dragging)
            return;
          if (this.scrolling)
            return;
          if (this.trackMouseOver)
            return;
          var autoHideTimeout = this.props.autoHideTimeout;
          clearTimeout(this.hideTracksTimeout);
          this.hideTracksTimeout = setTimeout(function() {
            (0, _domCss2["default"])(_this3.trackHorizontal, { opacity: 0 });
            (0, _domCss2["default"])(_this3.trackVertical, { opacity: 0 });
          }, autoHideTimeout);
        }
      }, {
        key: "detectScrolling",
        value: function detectScrolling() {
          var _this4 = this;
          if (this.scrolling)
            return;
          this.scrolling = true;
          this.handleScrollStart();
          this.detectScrollingInterval = setInterval(function() {
            if (_this4.lastViewScrollLeft === _this4.viewScrollLeft && _this4.lastViewScrollTop === _this4.viewScrollTop) {
              clearInterval(_this4.detectScrollingInterval);
              _this4.scrolling = false;
              _this4.handleScrollStop();
            }
            _this4.lastViewScrollLeft = _this4.viewScrollLeft;
            _this4.lastViewScrollTop = _this4.viewScrollTop;
          }, 100);
        }
      }, {
        key: "raf",
        value: function raf(callback) {
          var _this5 = this;
          if (this.requestFrame)
            _raf3["default"].cancel(this.requestFrame);
          this.requestFrame = (0, _raf3["default"])(function() {
            _this5.requestFrame = void 0;
            callback();
          });
        }
      }, {
        key: "update",
        value: function update(callback) {
          var _this6 = this;
          this.raf(function() {
            return _this6._update(callback);
          });
        }
      }, {
        key: "_update",
        value: function _update(callback) {
          var _props4 = this.props, onUpdate = _props4.onUpdate, hideTracksWhenNotNeeded = _props4.hideTracksWhenNotNeeded;
          var values = this.getValues();
          if ((0, _getScrollbarWidth2["default"])()) {
            var scrollLeft = values.scrollLeft, clientWidth = values.clientWidth, scrollWidth = values.scrollWidth;
            var trackHorizontalWidth = (0, _getInnerWidth2["default"])(this.trackHorizontal);
            var thumbHorizontalWidth = this.getThumbHorizontalWidth();
            var thumbHorizontalX = scrollLeft / (scrollWidth - clientWidth) * (trackHorizontalWidth - thumbHorizontalWidth);
            var thumbHorizontalStyle = {
              width: thumbHorizontalWidth,
              transform: "translateX(" + thumbHorizontalX + "px)"
            };
            var scrollTop = values.scrollTop, clientHeight = values.clientHeight, scrollHeight = values.scrollHeight;
            var trackVerticalHeight = (0, _getInnerHeight2["default"])(this.trackVertical);
            var thumbVerticalHeight = this.getThumbVerticalHeight();
            var thumbVerticalY = scrollTop / (scrollHeight - clientHeight) * (trackVerticalHeight - thumbVerticalHeight);
            var thumbVerticalStyle = {
              height: thumbVerticalHeight,
              transform: "translateY(" + thumbVerticalY + "px)"
            };
            if (hideTracksWhenNotNeeded) {
              var trackHorizontalStyle = {
                visibility: scrollWidth > clientWidth ? "visible" : "hidden"
              };
              var trackVerticalStyle = {
                visibility: scrollHeight > clientHeight ? "visible" : "hidden"
              };
              (0, _domCss2["default"])(this.trackHorizontal, trackHorizontalStyle);
              (0, _domCss2["default"])(this.trackVertical, trackVerticalStyle);
            }
            (0, _domCss2["default"])(this.thumbHorizontal, thumbHorizontalStyle);
            (0, _domCss2["default"])(this.thumbVertical, thumbVerticalStyle);
          }
          if (onUpdate)
            onUpdate(values);
          if (typeof callback !== "function")
            return;
          callback(values);
        }
      }, {
        key: "render",
        value: function render() {
          var _this7 = this;
          var scrollbarWidth = (0, _getScrollbarWidth2["default"])();
          var _props5 = this.props, onScroll = _props5.onScroll, onScrollFrame = _props5.onScrollFrame, onScrollStart = _props5.onScrollStart, onScrollStop = _props5.onScrollStop, onUpdate = _props5.onUpdate, renderView = _props5.renderView, renderTrackHorizontal = _props5.renderTrackHorizontal, renderTrackVertical = _props5.renderTrackVertical, renderThumbHorizontal = _props5.renderThumbHorizontal, renderThumbVertical = _props5.renderThumbVertical, tagName = _props5.tagName, hideTracksWhenNotNeeded = _props5.hideTracksWhenNotNeeded, autoHide = _props5.autoHide, autoHideTimeout = _props5.autoHideTimeout, autoHideDuration = _props5.autoHideDuration, thumbSize = _props5.thumbSize, thumbMinSize = _props5.thumbMinSize, universal = _props5.universal, autoHeight = _props5.autoHeight, autoHeightMin = _props5.autoHeightMin, autoHeightMax = _props5.autoHeightMax, style = _props5.style, children = _props5.children, props = _objectWithoutProperties(_props5, ["onScroll", "onScrollFrame", "onScrollStart", "onScrollStop", "onUpdate", "renderView", "renderTrackHorizontal", "renderTrackVertical", "renderThumbHorizontal", "renderThumbVertical", "tagName", "hideTracksWhenNotNeeded", "autoHide", "autoHideTimeout", "autoHideDuration", "thumbSize", "thumbMinSize", "universal", "autoHeight", "autoHeightMin", "autoHeightMax", "style", "children"]);
          var didMountUniversal = this.state.didMountUniversal;
          var containerStyle = _extends({}, _styles.containerStyleDefault, autoHeight && _extends({}, _styles.containerStyleAutoHeight, {
            minHeight: autoHeightMin,
            maxHeight: autoHeightMax
          }), style);
          var viewStyle = _extends({}, _styles.viewStyleDefault, {
            // Hide scrollbars by setting a negative margin
            marginRight: scrollbarWidth ? -scrollbarWidth : 0,
            marginBottom: scrollbarWidth ? -scrollbarWidth : 0
          }, autoHeight && _extends({}, _styles.viewStyleAutoHeight, {
            // Add scrollbarWidth to autoHeight in order to compensate negative margins
            minHeight: (0, _isString2["default"])(autoHeightMin) ? "calc(" + autoHeightMin + " + " + scrollbarWidth + "px)" : autoHeightMin + scrollbarWidth,
            maxHeight: (0, _isString2["default"])(autoHeightMax) ? "calc(" + autoHeightMax + " + " + scrollbarWidth + "px)" : autoHeightMax + scrollbarWidth
          }), autoHeight && universal && !didMountUniversal && {
            minHeight: autoHeightMin,
            maxHeight: autoHeightMax
          }, universal && !didMountUniversal && _styles.viewStyleUniversalInitial);
          var trackAutoHeightStyle = {
            transition: "opacity " + autoHideDuration + "ms",
            opacity: 0
          };
          var trackHorizontalStyle = _extends({}, _styles.trackHorizontalStyleDefault, autoHide && trackAutoHeightStyle, (!scrollbarWidth || universal && !didMountUniversal) && {
            display: "none"
          });
          var trackVerticalStyle = _extends({}, _styles.trackVerticalStyleDefault, autoHide && trackAutoHeightStyle, (!scrollbarWidth || universal && !didMountUniversal) && {
            display: "none"
          });
          return (0, _react.createElement)(tagName, _extends({}, props, { style: containerStyle, ref: function ref(_ref3) {
            _this7.container = _ref3;
          } }), [(0, _react.cloneElement)(renderView({ style: viewStyle }), { key: "view", ref: function ref(_ref4) {
            _this7.view = _ref4;
          } }, children), (0, _react.cloneElement)(renderTrackHorizontal({ style: trackHorizontalStyle }), { key: "trackHorizontal", ref: function ref(_ref5) {
            _this7.trackHorizontal = _ref5;
          } }, (0, _react.cloneElement)(renderThumbHorizontal({ style: _styles.thumbHorizontalStyleDefault }), { ref: function ref(_ref6) {
            _this7.thumbHorizontal = _ref6;
          } })), (0, _react.cloneElement)(renderTrackVertical({ style: trackVerticalStyle }), { key: "trackVertical", ref: function ref(_ref7) {
            _this7.trackVertical = _ref7;
          } }, (0, _react.cloneElement)(renderThumbVertical({ style: _styles.thumbVerticalStyleDefault }), { ref: function ref(_ref8) {
            _this7.thumbVertical = _ref8;
          } }))]);
        }
      }]);
      return Scrollbars2;
    }(_react.Component);
    exports["default"] = Scrollbars;
    Scrollbars.propTypes = {
      onScroll: _propTypes2["default"].func,
      onScrollFrame: _propTypes2["default"].func,
      onScrollStart: _propTypes2["default"].func,
      onScrollStop: _propTypes2["default"].func,
      onUpdate: _propTypes2["default"].func,
      renderView: _propTypes2["default"].func,
      renderTrackHorizontal: _propTypes2["default"].func,
      renderTrackVertical: _propTypes2["default"].func,
      renderThumbHorizontal: _propTypes2["default"].func,
      renderThumbVertical: _propTypes2["default"].func,
      tagName: _propTypes2["default"].string,
      thumbSize: _propTypes2["default"].number,
      thumbMinSize: _propTypes2["default"].number,
      hideTracksWhenNotNeeded: _propTypes2["default"].bool,
      autoHide: _propTypes2["default"].bool,
      autoHideTimeout: _propTypes2["default"].number,
      autoHideDuration: _propTypes2["default"].number,
      autoHeight: _propTypes2["default"].bool,
      autoHeightMin: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
      autoHeightMax: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
      universal: _propTypes2["default"].bool,
      style: _propTypes2["default"].object,
      children: _propTypes2["default"].node
    };
    Scrollbars.defaultProps = {
      renderView: _defaultRenderElements.renderViewDefault,
      renderTrackHorizontal: _defaultRenderElements.renderTrackHorizontalDefault,
      renderTrackVertical: _defaultRenderElements.renderTrackVerticalDefault,
      renderThumbHorizontal: _defaultRenderElements.renderThumbHorizontalDefault,
      renderThumbVertical: _defaultRenderElements.renderThumbVerticalDefault,
      tagName: "div",
      thumbMinSize: 30,
      hideTracksWhenNotNeeded: false,
      autoHide: false,
      autoHideTimeout: 1e3,
      autoHideDuration: 200,
      autoHeight: false,
      autoHeightMin: 0,
      autoHeightMax: 200,
      universal: false
    };
  }
});

// node_modules/react-custom-scrollbars-2/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-custom-scrollbars-2/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Scrollbars = void 0;
    var _Scrollbars = require_Scrollbars();
    var _Scrollbars2 = _interopRequireDefault(_Scrollbars);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    exports["default"] = _Scrollbars2["default"];
    exports.Scrollbars = _Scrollbars2["default"];
  }
});
export default require_lib();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=react-custom-scrollbars-2.js.map
